{"version":3,"sources":["reportWebVitals.js","components/button/Button.jsx","components/input/Input.jsx","components/image/Image.jsx","assets/images/splash.png","components/splash/Splash.jsx","utils/index.js","assets/images/logo.png","assets/images/fake-news.jpg","view/Main.jsx","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","HXButton","className","props","cls","TextArea","Input","HXTextArea","HXImage","defaultProps","preview","HXSplash","children","useState","splashTime","setSplashTime","useEffect","setTimeout","src","SplashImg","alt","fetchNewsResult","newsText","a","axios","post","text","response","data","console","error","defaults","baseURL","headers","accept","Header","Layout","Content","Title","Typography","Text","MainView","setnewsText","loading","setLoading","result","setresult","onClickSubmit","filteredNewsText","replace","message","prediction","toLowerCase","success","justify","align","Logo","width","xs","lg","gutter","span","placeholder","onChange","e","target","value","rows","maxLength","block","size","onClick","includes","level","FakeNews","App","Main","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.47a9abc0.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { Button } from \"antd\";\nimport PropTypes from \"prop-types\";\nimport \"./style.css\";\n\nexport const HXButton = ({ className = \"\", ...props }) => {\n  const cls = `${className} hx-button`;\n  return <Button {...props} className={cls} />;\n};\n\n// Setting prop types\nHXButton.propTypes = {\n  onClick: PropTypes.func.isRequired,\n  loading: PropTypes.bool,\n  shape: PropTypes.string,\n  size: PropTypes.string,\n  icon: PropTypes.node,\n};\n","import { Input } from \"antd\";\nimport \"./style.css\";\n\nconst { TextArea } = Input;\n\nexport const HXTextArea = ({ className = \"\", ...props }) => {\n  const cls = `${className} hx-textarea`;\n  return <TextArea {...props} className={cls} />;\n};\n","import PropTypes from \"prop-types\";\nimport { Image } from \"antd\";\n\nexport const HXImage = (props) => <Image {...props} />;\n\nHXImage.propTypes = {\n  src: PropTypes.node.isRequired,\n  alt: PropTypes.string.isRequired,\n  preview: PropTypes.bool,\n};\n\nHXImage.defaultProps = {\n  preview: false,\n};\n","export default __webpack_public_path__ + \"static/media/splash.c49de840.png\";","import { useState, useEffect } from \"react\";\n\nimport { HXImage } from \"components\";\nimport SplashImg from \"assets/images/splash.png\";\nimport \"./style.css\";\n\nexport const HXSplash = ({ children }) => {\n  const [splashTime, setSplashTime] = useState(false);\n\n  useEffect(() => {\n    if (!splashTime) {\n      setTimeout(() => {\n        setSplashTime(true);\n      }, 1500);\n    }\n  }, [splashTime]);\n\n  return (\n    <>\n      {splashTime ? (\n        children\n      ) : (\n        <div className=\"hx-splash-wrapper\">\n          <HXImage src={SplashImg} alt={\"Hoax Splash\"} />\n        </div>\n      )}\n    </>\n  );\n};\n","/**\n * Here we will be dispatching API actions\n */\nimport axios from \"axios\";\n\n// We need to set default config for axios\naxios.defaults.baseURL = \"https://fake-news-detector-backend.herokuapp.com\";\naxios.defaults.headers.post = {\n  \"Access-Control-Allow-Origin\": \"*\",\n  accept: \"application/json\",\n  \"Content-Type\": \"application/json\",\n};\n// We will be using async function for dispatching network requests\nexport async function fetchNewsResult(newsText) {\n  try {\n    const response = await axios.post(\"/detect\", {\n      text: newsText,\n    });\n    return response.data;\n  } catch (error) {\n    console.error(error);\n  }\n}\n","export default __webpack_public_path__ + \"static/media/logo.cdb21045.png\";","export default __webpack_public_path__ + \"static/media/fake-news.372150b5.jpg\";","import { useState } from \"react\";\nimport { Layout, Row, Col, Typography, message } from \"antd\";\nimport { HXImage, HXButton, HXTextArea } from \"components/index\";\nimport { fetchNewsResult } from \"utils\";\nimport Logo from \"assets/images/logo.png\";\nimport FakeNews from \"assets/images/fake-news.jpg\";\n\nimport \"view/main.css\";\n\nconst { Header, Content } = Layout;\nconst { Title, Text } = Typography;\n\n/**\n * We will be setting a basic layout for the web.\n * Also we should be calling our actions from here\n * and pass down the values through props (single responsibility)\n *\n * @todo make sure to not use \"style\" attribute. Create classes which should be inherited from parent class\n * .main-view\n */\n\nconst MainView = (props) => {\n  const [newsText, setnewsText] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [result, setresult] = useState(\"\");\n\n  const onClickSubmit = async () => {\n    if (newsText) {\n      // removing links and special symbols from th news text\n      // Allowing only white listed text from newsText.\n      const filteredNewsText = newsText.replace(/[^a-zA-Z0-9 ]/g, \"\");\n\n      message.loading(\"Calculating news...\");\n      setLoading(true);\n      setresult(\"\");\n      try {\n        const response = await fetchNewsResult(filteredNewsText);\n        setresult(response.prediction.toLowerCase());\n        message.success(\"Woohoo your news is now calculated!\");\n      } catch (e) {\n        message.error(\"Looks like something went wrong!\");\n      }\n      setLoading(false);\n    } else {\n      message.error(\"Enter news first!\");\n    }\n  };\n\n  return (\n    <Layout className=\"main-view\">\n      <Header>\n        <Row justify=\"center\" align=\"middle\" className=\"hx-header-row\">\n          <Col>\n            <HXImage src={Logo} alt=\"The Hoax\" width={280} />\n          </Col>\n        </Row>\n      </Header>\n      <Content className=\"hx-content\">\n        <Row justify=\"center\">\n          <Col xs={24} lg={20}>\n            {/* Here we will be applying using the components */}\n            <Row gutter={10} justify=\"space-between\">\n              <Col xs={24} lg={12}>\n                <Title>Fake News Detector</Title>\n                <Text>\n                  Ever thought how we can find the fake articles/news that do\n                  get spread in the world of internet very easily? Now thanks to\n                  the AI we can easily find the fake news and tell you which one\n                  is the correct article. We are using Tensorflow model through\n                  which we will be finding out the fake news.\n                </Text>\n                <Row align=\"middle\" justify=\"end\">\n                  <Col span={24}>\n                    <HXTextArea\n                      placeholder=\"It's time to find the actual news! Enter now...\"\n                      onChange={(e) => setnewsText(e.target.value)}\n                      rows={11}\n                      maxLength={3500}\n                    />\n                  </Col>\n                  <Col xs={12} lg={6}>\n                    <HXButton\n                      className=\"hx-button-analyze\"\n                      block\n                      size=\"large\"\n                      onClick={onClickSubmit}\n                      loading={loading}\n                    >\n                      Analyze\n                    </HXButton>\n                  </Col>\n                </Row>\n              </Col>\n              <Col lg={12}>\n                <Row gutter={20} justify=\"center\" align=\"middle\">\n                  <Col>\n                    {result.includes(\"real\") ? (\n                      <Title level={4} className=\"result-real\">\n                        Its Real\n                      </Title>\n                    ) : result.includes(\"fake\") ? (\n                      <Title level={4} className=\"result-fake\">\n                        Its Fake\n                      </Title>\n                    ) : null}\n                  </Col>\n                </Row>\n                <Row justify=\"center\">\n                  <Col>\n                    <HXImage src={FakeNews} alt=\"Fake News\" />\n                  </Col>\n                </Row>\n              </Col>\n            </Row>\n          </Col>\n        </Row>\n      </Content>\n    </Layout>\n  );\n};\n\nexport default MainView;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport reportWebVitals from \"reportWebVitals\";\n\nimport { HXSplash } from \"components\";\nimport MainView from \"view/Main\";\n\nimport \"index.css\";\n\nconst App = () => {\n  return (\n    <HXSplash>\n      <MainView />\n    </HXSplash>\n  );\n};\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}